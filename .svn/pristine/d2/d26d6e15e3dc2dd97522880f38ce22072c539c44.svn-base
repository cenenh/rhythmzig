package com.sgen.DAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import com.sgen.DTO.UsersDTO;
import com.sgen.util.JDBCUtil;
import com.sgen.util.ResultStatus;

public class UsersDAO {
	private final String LOGIN = "SELECT * FROM users WHERE deviceCode = ? ";
	private final String CHANGE_NAME = "UPDATE users SET userName = ? WHERE userCode = ? and deviceCode = ?";
	private final String GETUSERS = "SELECT * FROM users WHERE deviceCode = ? ";
	private final String GET_ADMIN = "SELECT userCode FROM rhythmzig.users WHERE deviceCode= ? and isAdmin=1";
	private final String ADD_USER = "INSERT INTO rhythmzig.users values(? , ? , ? , ?) ";
	private final String GRANT_AUTHORITY = "UPDATE users SET isAdmin = FALSE WHERE userCode = ? AND deviceCode = ?";
	private final String DEPRIVE_AUTHORITY = "UPDATE users SET isAdmin = TRUE WHERE userCode = ? AND deviceCode= ?";
	private final String REGIST_GCM_ID = "UPDATE users SET regId = ? WHERE userCode = ? AND deviceCode = ?";

	public int addUser(UsersDTO usersDTO) {

		int result = 0;
		int index = 1;
		Connection conn = null;
		PreparedStatement pstmt = null;
		try {
			conn = JDBCUtil.getConnection();
			pstmt = conn.prepareStatement(ADD_USER);
			// userCode , userName, isAdmin, deviceCode
			pstmt.setString(index++, usersDTO.getUserCode());
			pstmt.setString(index++, usersDTO.getUserName());
			pstmt.setBoolean(index++, usersDTO.isAdmin());
			pstmt.setString(index++, usersDTO.getDeviceCode());
			result = pstmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			System.out.println(e.getMessage());
			e.printStackTrace();
		} finally {
			JDBCUtil.close(conn, pstmt);
		}
		return result;
	}

	public UsersDTO isAdminUser(UsersDTO usersDTO) {

		int index = 1;
		Connection conn = null;
		UsersDTO dto = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			conn = JDBCUtil.getConnection();
			pstmt = conn.prepareStatement(GET_ADMIN);
			pstmt.setString(index++, usersDTO.getDeviceCode());
			rs = pstmt.executeQuery();

			if (!rs.next()) // no admin user
			{
				System.out.println("there is no admin");
				dto = new UsersDTO();
				dto.setDeviceCode(usersDTO.getDeviceCode());
				dto.setUserCode(usersDTO.getUserCode());
				dto.setUserName(usersDTO.getUserCode());
				dto.setAdmin(true);
			} else // yes admin user
			{
				System.out.println(usersDTO.getUserName() + "is admin user");
				dto = new UsersDTO();
				dto.setDeviceCode(usersDTO.getDeviceCode());
				dto.setUserCode(usersDTO.getUserCode());
				dto.setUserName(usersDTO.getUserCode());
				dto.setAdmin(false);
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			JDBCUtil.close(conn, pstmt, rs);
		}
		return dto;
	}

	// 유저 코드가 잘못되었거나 디바이스 코드가 잘못되거나 둘 다 잘못되거나...
	public UsersDTO login(UsersDTO usersDTO) {
		// TODO Auto-generated method stub
		Connection conn = JDBCUtil.getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			pstmt = conn.prepareStatement(LOGIN);

			int idx = 0;
			pstmt.setString(++idx, usersDTO.getDeviceCode());

			rs = pstmt.executeQuery();
			String result = null;
			while (rs.next()) {
				String deviceCode = rs.getString("deviceCode");
				if (usersDTO.getDeviceCode().equals(deviceCode)) {
					String userCode = rs.getString("userCode");
					if (usersDTO.getUserCode().equals(userCode)) {
						result = rs.getString("userCode");
						usersDTO.setRegId(rs.getString("regId"));
						usersDTO.setUserName(rs.getString("userName"));
						usersDTO.setAdmin(rs.getBoolean("isAdmin"));
						usersDTO.setDeviceCode(rs.getString("deviceCode"));
						
						break;
					} else {
						result = ResultStatus.NOSUCHUSER;
					}
					
				} 
			} 
			if(!(rs.next())){
				// 존재하지 않는 deviceCode
				System.out.println("no such device");
				result = ResultStatus.NOSUCHDEVICE;
			}
			usersDTO.setUserCode(result);

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			JDBCUtil.close(conn, pstmt, rs);
		}

		return usersDTO;
	}

	public int changeName(UsersDTO usersDTO) {
		// TODO Auto-generated method stub
		Connection conn = JDBCUtil.getConnection();
		PreparedStatement pstmt = null;

		int result = 0;
		try {
			pstmt = conn.prepareStatement(CHANGE_NAME);

			int idx = 0;
			pstmt.setString(++idx, usersDTO.getUserName());
			pstmt.setString(++idx, usersDTO.getUserCode());
			pstmt.setString(++idx, usersDTO.getDeviceCode());

			result = pstmt.executeUpdate();

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			JDBCUtil.close(conn, pstmt);
		}

		return result;

	}

	public ArrayList<UsersDTO> getUsers(UsersDTO usersDTO) {
		// TODO Auto-generated method stub
		Connection conn = JDBCUtil.getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		ArrayList<UsersDTO> userlist = new ArrayList<UsersDTO>();
		try {
			pstmt = conn.prepareStatement(GETUSERS);

			pstmt.setString(1, usersDTO.getDeviceCode());

			rs = pstmt.executeQuery();

			while (rs.next()) {
				UsersDTO user = new UsersDTO();
				user.setUserName(rs.getString("userName"));
				user.setUserCode(rs.getString("userCode"));
				user.setAdmin(rs.getBoolean("isAdmin"));

				userlist.add(user);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			JDBCUtil.close(conn, pstmt, rs);
		}

		return userlist;
	}

	public int grantAuthority(UsersDTO userDTO) {
		// TODO Auto-generated method stub
		Connection conn = JDBCUtil.getConnection();
		PreparedStatement pstmt = null;
		int result = 0;
		
		try {
			pstmt= conn.prepareStatement(GRANT_AUTHORITY);
			
			int idx=0;
			pstmt.setString(++idx, userDTO.getUserCode());
			pstmt.setString(++idx, userDTO.getDeviceCode());
			
			result = pstmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			JDBCUtil.close(conn, pstmt);
		}
		
		return result;
	}

	public int depriveAuthority(UsersDTO userDTO) {
		Connection conn = JDBCUtil.getConnection();
		PreparedStatement pstmt = null;
		int result = 0;
		
		try {
			pstmt = conn.prepareStatement(DEPRIVE_AUTHORITY);
			
			int idx=0;
			pstmt.setString(++idx, userDTO.getUserCode());
			pstmt.setString(++idx, userDTO.getDeviceCode());
			
			result = pstmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			JDBCUtil.close(conn, pstmt);
		}
		
		return result;
	}

	public int registGCMId(UsersDTO usersDTO) {
		Connection conn = JDBCUtil.getConnection();
		PreparedStatement pstmt = null;
		int result = 0;
		try {
			pstmt = conn.prepareStatement(REGIST_GCM_ID);
			
			int idx = 0;
			pstmt.setString(++idx, usersDTO.getRegId());
			pstmt.setString(++idx, usersDTO.getUserCode());
			pstmt.setString(++idx, usersDTO.getDeviceCode());
			
			result = pstmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally { 
			JDBCUtil.close(conn, pstmt);
		}
		
		return result;
	}
}
